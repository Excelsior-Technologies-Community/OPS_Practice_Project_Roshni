@model List<UserModel>

@{
    ViewData["Title"] = "Admin Chat";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
    .chat-message.admin {
        text-align: right;
        background-color: white;
        padding: 5px;
        border-radius: 5px;
    }

    .chat-message.user {
        text-align: left;
        background-color: white;
        padding: 5px;
        border-radius: 5px;
    }

    .user-list {
        height: 500px;
        overflow-y: auto;
        border-right: 1px solid #ddd;
    }

    .chat-area {
        height: 400px;
        overflow-y: auto;
        padding: 10px;
    }

    .user-item {
        cursor: pointer;
        padding: 10px;
        border-bottom: 1px solid #eee;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

        .user-item:hover {
            background-color: #f1f1f1;
        }

    .notification-badge {
        background-color: red;
        color: white;
        font-size: 12px;
        border-radius: 50%;
        width: 18px;
        height: 18px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
    }

    .notification-icon {
        width: 20px;
        height: 20px;
        display: none; /* Hidden by default */
    }



    
</style>

<div class="container mt-5">
    <div class="row">
        <!-- User List -->
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">Users</div>
                <div class="card-body user-list" id="user-list">
                    @foreach (var user in Model)
                    {
                        <div class="user-item mb-2 p-2 border rounded d-flex align-items-center justify-content-between"
                             data-userid="@user.Id" id="user-@user.Id" onclick="openChat(@user.Id)">

                            <div class="d-flex align-items-center">
                                <img src="@user.ProfileImage" width="30" height="30" class="rounded-circle me-2" />
                                <strong>@user.UserName</strong> <small>(ID: @user.Id)</small>
                            </div>

                            <!-- Unread message badge -->
                            @if (user.UnreadCount > 0)
                            {
                                <span class="notification-badge" id="notify-@user.Id">@user.UnreadCount</span>
                            }
                        </div>
                    }

                </div>
            </div>
        </div>

        <!-- Chat Box -->
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header bg-danger text-white">Live Chat <span id="chat-with"></span></div>
                <div class="card-body chat-area" id="chat-box"></div>
                <div class="card-footer">
                    <div class="input-group">
                        <input type="text" id="message-input" class="form-control" placeholder="Type your message..." disabled />
                        <button class="btn btn-danger" id="send-btn" disabled>Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
    var adminId = 4;
    var selectedUserId = null;

    connection.on("ReceiveMessage", function (senderId, message, isAdminReply) {
        if (selectedUserId == senderId) {
            // Append message if chat is open
            var msgClass = isAdminReply ? "chat-message admin" : "chat-message user";
            $("#chat-box").append(`<div class='${msgClass}'><strong>${isAdminReply ? "Admin" : "User"}:</strong> ${message}</div>`);
        } else {
            // Show unread message notification
            let badge = $("#notify-" + senderId);
            let count = parseInt(badge.text() || 0) + 1;
            badge.text(count).show();
        }
    });

    connection.on("UpdateUnreadMessages", function (unreadCounts) {
        $(".notification-badge").hide(); // Hide all badges initially

        // Update notification count for each user
        for (const userId in unreadCounts) {
            if (unreadCounts[userId] > 0) {
                $("#notify-" + userId).text(unreadCounts[userId]).show();
            }
        }
    });

    function openChat(userId) {
        selectedUserId = userId;
        $("#chat-with").html("- User ID: " + selectedUserId);
        $("#message-input").prop("disabled", false);
        $("#send-btn").prop("disabled", false);

        // Hide notification badge for the opened chat
        $("#notify-" + userId).hide().text('');

        // Mark messages as read in the database
        $.post('/Admin/MarkMessagesAsRead', { userId: userId }, function () {
            console.log("Messages marked as read for User ID: " + userId);
        });

        loadChat(userId);
    }

    function loadChat(userId) {
        $.ajax({
            url: '/Admin/LoadChat',
            type: 'GET',
            data: { userId: userId },
            success: function (response) {
                $("#chat-box").empty();
                if (response.length > 0) {
                    response.forEach(function (chat) {
                        var messageClass = chat.isAdminReply ? "chat-message admin" : "chat-message user";
                        $("#chat-box").append(`<div class="${messageClass}"><strong>${chat.isAdminReply ? "Admin" : "User"}:</strong> ${chat.message}</div>`);
                    });
                } else {
                    $("#chat-box").html('<p class="text-center">No chat history found.</p>');
                }
            },
            error: function (error) {
                console.log("Error loading chat:", error);
            }
        });
    }

    $("#send-btn").click(function () {
        var msg = $("#message-input").val().trim();
        if (msg === "" || selectedUserId === null) return;

        $.post('/Admin/SendAdminMessage', { userId: selectedUserId, message: msg }, function (res) {
            if (res.success) {
                connection.invoke("SendMessage", adminId, selectedUserId, msg, true)
                    .catch(err => console.error(err.toString()));
                $("#message-input").val('');
            } else {
                alert(res.message || "Message not sent");
            }
        });
    });

    connection.start().catch(err => console.error(err.toString()));
</script>
